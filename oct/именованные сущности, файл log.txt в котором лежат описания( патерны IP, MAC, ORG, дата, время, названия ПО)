import re
import json
import pandas as pd
from collections import defaultdict
from datetime import datetime
import sys
import os

def read_text_file(file_path):
    """–ß–ò–¢–ê–ï–¢ TXT –§–ê–ô–õ"""
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª {file_path} –ù–ï –ù–ê–ô–î–ï–ù!")
        print("üìù –°–æ–∑–¥–∞—é –ø—Ä–∏–º–µ—Ä log.txt...")
        example_text = """192.168.1.100 ERROR at 2024-03-15 09:30:00
MAC 08:00:27:5A:BC:D3 connected to Zabbix 6.4
10.10.2.15 DNS failed Wireshark 4.2.1 at 11:20:15
pfSense 2.7.0 blocked 00:50:56:AA:BB:CC on 16 –º–∞—Ä—Ç–∞ 2024"""
        with open("log.txt", "w", encoding="utf-8") as f:
            f.write(example_text)
        return example_text
    
    with open(file_path, 'r', encoding='utf-8') as f:
        text = f.read()
    print(f"üìÑ –ü—Ä–æ—á–∏—Ç–∞–Ω —Ñ–∞–π–ª: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    return text

def extract_all_entities(text):
    entities = defaultdict(list)
    
    # üî¥ IP-–∞–¥—Ä–µ—Å–∞
    for match in re.finditer(r'\b(?:\d{1,3}\.){3}\d{1,3}(?:/\d{1,2})?\b', text):
        entities['IP'].append(match.group())
    
    # üîµ MAC-–∞–¥—Ä–µ—Å–∞
    for match in re.finditer(r'\b[0-9A-Fa-f]{2}(?::[0-9A-Fa-f]{2}){5}\b', text):
        entities['MAC'].append(match.group())
    
    # üü¢ –ü–û (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
    software_names = [
        'Zabbix', 'pfSense', 'Snort', 'Wireshark', 'Nmap', 'Cain', 'Abel', 
        'EternalBlue', 'Cisco IOS', 'Windows Server', 'Ubuntu Server', 
        'Splunk', 'ARP-spoofing'
    ]
    words = re.findall(r'\b\w+\b', text)
    for word in words:
        for sw in software_names:
            if sw.lower() in word.lower():
                entities['SOFTWARE'].append(sw)
    
    # üü° –î–ê–¢–´ (—Ä—É—Å—Å–∫–∏–µ + —Ü–∏—Ñ—Ä—ã)
    for match in re.finditer(r'\b(\d{1,2}\s+(?:–º–∞—Ä—Ç–∞?|—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+\d{4})\b', text):
        entities['DATE'].append(match.group())
    for match in re.finditer(r'\b20\s?\d{2}\b', text):
        entities['DATE'].append(match.group())
    
    # üü£ –í–†–ï–ú–Ø
    for match in re.finditer(r'\b\d{2}:\d{2}:\d{2}\b', text):
        entities['TIME'].append(match.group())
    
    # üè¢ –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò
    for match in re.finditer(r'¬´([^¬ª]+)¬ª', text):
        entities['ORG'].append(match.group(1))
    
    return {k: list(set(v)) for k, v in entities.items()}

def save_all_reports(result, text, input_file):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # üìä 1. –¢–ê–ë–õ–ò–¶–ê (CSV + TXT)
    df = pd.DataFrame([
        {'–¢–∏–ø': k, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': len(v), '–ü—Ä–∏–º–µ—Ä—ã': ', '.join(v[:2])}
        for k, v in result.items()
    ])
    csv_name = f'ner_report_{os.path.splitext(os.path.basename(input_file))[0]}_{timestamp}.csv'
    txt_name = f'ner_summary_{os.path.splitext(os.path.basename(input_file))[0]}_{timestamp}.txt'
    
    df.to_csv(csv_name, index=False, encoding='utf-8')
    with open(txt_name, 'w', encoding='utf-8') as f:
        f.write("üöÄ –û–¢–ß–ï–¢ NER –ê–ù–ê–õ–ò–ó–ê\n")
        f.write("="*50 + "\n\n")
        f.write(df.to_string(index=False) + "\n\n")
        f.write(f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n")
        f.write(f"üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫: {input_file}\n")
    
    # üíæ 2. JSON
    json_name = f'entities_{os.path.splitext(os.path.basename(input_file))[0]}_{timestamp}.json'
    with open(json_name, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    # üé® 3. –¶–í–ï–¢–ù–û–ô –¢–ï–ö–°–¢ (HTML)
    html_name = f'colored_{os.path.splitext(os.path.basename(input_file))[0]}_{timestamp}.html'
    html_content = "<html><body><h1>üéØ –í–´–î–ï–õ–ï–ù–ù–´–ô –¢–ï–ö–°–¢</h1><pre style='font-size:14px;'>"
    sentences = re.split(r'[.!?]+', text)[:10]
    for i, sent in enumerate(sentences, 1):
        colored = sent
        for entity_type, color in [
            ('IP', 'red'), ('MAC', 'blue'), ('SOFTWARE', 'green'), 
            ('DATE', 'orange'), ('TIME', 'purple'), ('ORG', 'brown')
        ]:
            pattern = '|'.join(re.escape(e) for e in result.get(entity_type, []))
            if pattern:
                colored = re.sub(
                    f'\\b({pattern})\\b', 
                    f'<span style="color:{color};font-weight:bold;">\\g<1></span>', 
                    colored
                )
        html_content += f"<b>{i}.</b> {colored}<br>\n"
    html_content += "</pre></body></html>"
    with open(html_name, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    # üìÑ 4. –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ (TXT)
    full_name = f'full_report_{os.path.splitext(os.path.basename(input_file))[0]}_{timestamp}.txt'
    full_report = f"""–ö–ò–ë–ï–†–ê–¢–ê–ö–ò - –ü–û–õ–ù–´–ô NER –û–¢–ß–ï–¢
{'='*60}
üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫: {input_file}

–°–£–©–ù–û–°–¢–ò ({sum(len(v) for v in result.values())} –≤—Å–µ–≥–æ):

IP-–ê–î–†–ï–°–ê ({len(result.get('IP', []))}):
{chr(10).join(f'‚Ä¢ {ip}' for ip in result.get('IP', []))}

MAC-–ê–î–†–ï–°–ê ({len(result.get('MAC', []))}):
{chr(10).join(f'‚Ä¢ {mac}' for mac in result.get('MAC', []))}

–ü–†–û–ì–†–ê–ú–ú–´ ({len(result.get('SOFTWARE', []))}):
{chr(10).join(f'‚Ä¢ {sw}' for sw in result.get('SOFTWARE', []))}

–î–ê–¢–´ ({len(result.get('DATE', []))}):
{chr(10).join(f'‚Ä¢ {date}' for date in result.get('DATE', []))}

–í–†–ï–ú–Ø ({len(result.get('TIME', []))}):
{chr(10).join(f'‚Ä¢ {time}' for time in result.get('TIME', []))}

–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò ({len(result.get('ORG', []))}):
{chr(10).join(f'‚Ä¢ {org}' for org in result.get('ORG', []))}
"""
    with open(full_name, 'w', encoding='utf-8') as f:
        f.write(full_report)
    
    print(f"\n‚úÖ –°–û–ó–î–ê–ù–û 5 –§–ê–ô–õ–û–í:")
    print(f"   üìä {csv_name}")
    print(f"   üìù {txt_name}")
    print(f"   üíæ {json_name}")
    print(f"   üé® {html_name}")
    print(f"   üìÑ {full_name}")
    return [csv_name, txt_name, json_name, html_name, full_name]

# üéØ –ó–ê–ü–£–°–ö!
if __name__ == "__main__":
    print("üöÄ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô NER ‚Äî TXT –§–ê–ô–õ!")
    print("=" * 60)
    
    # –ß–ò–¢–ê–ï–ú –ê–†–ì–£–ú–ï–ù–¢ –ò–õ–ò log.txt
    if len(sys.argv) > 1:
        file_path = sys.argv[1]
    else:
        file_path = "log.txt"
    
    # –ß–ò–¢–ê–ï–ú –¢–ï–ö–°–¢
    TEXT = read_text_file(file_path)
    
    # –ê–ù–ê–õ–ò–ó
    result = extract_all_entities(TEXT)
    
    # –°–û–•–†–ê–ù–ï–ù–ò–ï
    files = save_all_reports(result, TEXT, file_path)
    
    # –ö–†–ê–¢–ö–ò–ô –í–´–í–û–î
    df = pd.DataFrame([
        {'–¢–∏–ø': k, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': len(v), '–ü—Ä–∏–º–µ—Ä—ã': ', '.join(v[:2])}
        for k, v in result.items()
    ])
    print("\nüìà –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢:")
    print(df.to_string(index=False))
    print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù! {sum(len(v) for v in result.values())} —Å—É—â–Ω–æ—Å—Ç–µ–π!")
