import fasttext
import fasttext.util
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from sklearn.manifold import TSNE
import plotly.express as px

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ FastText...")
ft_model = fasttext.load_model('cc.ru.300.bin')
print("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

def visualize_user_words():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–≤, –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    
    # –ó–∞–ø—Ä–æ—Å —Å–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n" + "="*50)
    print("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    user_input = input("–°–ª–æ–≤–∞: ").strip()
    
    if not user_input:
        print("–ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞!")
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–æ–¥ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    words_to_visualize = [word.strip() for word in user_input.split(',')]
    words_to_visualize = [word for word in words_to_visualize if word]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
    
    if not words_to_visualize:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ valid–Ω—ã—Ö —Å–ª–æ–≤!")
        return
    
    print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(words_to_visualize)} —Å–ª–æ–≤...")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä—ã
    word_vectors = []
    valid_words = []
    found_words = []
    not_found_words = []
    
    for word in words_to_visualize:
        try:
            vec = ft_model.get_word_vector(word)
            word_vectors.append(vec)
            valid_words.append(word)
            found_words.append(word)
        except:
            print(f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–æ–¥–µ–ª–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            not_found_words.append(word)
    
    if not valid_words:
        print("–ù–∏ –æ–¥–Ω–æ –∏–∑ —Å–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–æ–¥–µ–ª–∏!")
        return
    
    X = np.array(word_vectors)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º T-SNE –¥–ª—è 3D
    print("–°–æ–∑–¥–∞–Ω–∏–µ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    tsne = TSNE(n_components=3, perplexity=min(5, len(valid_words)-1), 
                random_state=42, n_iter=1000)
    X_tsne = tsne.fit_transform(X)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –±–ª–∏–∑–æ—Å—Ç–∏
    from sklearn.cluster import KMeans
    
    n_clusters = min(5, len(valid_words))  # –ù–µ –±–æ–ª—å—à–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, —á–µ–º —Å–ª–æ–≤
    if len(valid_words) > 1:
        kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
        clusters = kmeans.fit_predict(X_tsne)
    else:
        clusters = [0]  # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame({
        'x': X_tsne[:, 0],
        'y': X_tsne[:, 1], 
        'z': X_tsne[:, 2],
        'word': valid_words,
        'cluster': clusters,
        'size': 15  # –†–∞–∑–º–µ—Ä —Ç–æ—á–µ–∫
    })
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ —Å –ø–æ–¥–ø–∏—Å—è–º–∏
    fig.add_trace(go.Scatter3d(
        x=df['x'],
        y=df['y'],
        z=df['z'],
        mode='markers+text',
        marker=dict(
            size=df['size'],
            color=df['cluster'],
            colorscale='Viridis',
            opacity=0.8,
            line=dict(width=2, color='DarkSlateGrey')
        ),
        text=df['word'],
        textposition="middle center",
        textfont=dict(size=14, color='black', family="Arial Black"),
        hovertemplate=
        '<b>%{text}</b><br>' +
        'X: %{x:.3f}<br>' +
        'Y: %{y:.3f}<br>' +
        'Z: %{z:.3f}<br>' +
        '<extra></extra>'
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º layout
    fig.update_layout(
        title=dict(
            text=f'<b>3D –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —Å–ª–æ–≤<br>–í—Å–µ–≥–æ —Å–ª–æ–≤: {len(valid_words)}</b>',
            font=dict(size=20, family='Arial'),
            x=0.5,
            xanchor='center'
        ),
        scene=dict(
            xaxis_title='X –∏–∑–º–µ—Ä–µ–Ω–∏–µ T-SNE',
            yaxis_title='Y –∏–∑–º–µ—Ä–µ–Ω–∏–µ T-SNE', 
            zaxis_title='Z –∏–∑–º–µ—Ä–µ–Ω–∏–µ T-SNE',
            camera=dict(eye=dict(x=1.5, y=1.5, z=1.5))
        ),
        width=1000,
        height=700,
        showlegend=False
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    filename = f"user_words_visualization.html"
    fig.write_html(filename)
    print(f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}")
    fig.show()
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤ –≤ –º–æ–¥–µ–ª–∏: {len(found_words)}")
    if not_found_words:
        print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–æ–¥–µ–ª–∏: {', '.join(not_found_words)}")
    print(f"–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {len(set(clusters))}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –±–ª–∏–∑–∫–∏–µ —Å–ª–æ–≤–∞
    if len(found_words) > 1:
        print(f"\nüéØ –ë–ª–∏–∑–∫–∏–µ –ø–æ —Å–º—ã—Å–ª—É –ø–∞—Ä—ã:")
        from sklearn.metrics.pairwise import cosine_similarity
        similarities = cosine_similarity(X)
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –±–ª–∏–∑–∫–∏–µ –ø–∞—Ä—ã
        close_pairs = []
        for i in range(len(valid_words)):
            for j in range(i+1, len(valid_words)):
                sim = similarities[i, j]
                if sim > 0.6:  # –ü–æ—Ä–æ–≥ similarity
                    close_pairs.append((valid_words[i], valid_words[j], sim))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ similarity
        close_pairs.sort(key=lambda x: x[2], reverse=True)
        
        for word1, word2, sim in close_pairs[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –ø–∞—Ä
            print(f"  {word1} ‚Üî {word2} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {sim:.3f})")

# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
while True:
    visualize_user_words()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    print("\n" + "="*50)
    continue_input = input("–•–æ—Ç–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Å–ª–æ–≤–∞? (y/n): ").strip().lower()
    if continue_input not in ['y', 'yes', '–¥', '–¥–∞']:
        print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        break
